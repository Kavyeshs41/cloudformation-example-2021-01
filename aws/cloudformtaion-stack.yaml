AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::SecretsManager-2020-07-23
Description: "This is an example template to demonstrate CloudFormation resources"

Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-032930428bf1abbff"
    
Resources:
    
    MyInternetGateway:
      Type: AWS::EC2::InternetGateway

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref TestVPC
        InternetGatewayId: !Ref MyInternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref TestVPC
    
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref MyInternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref TestSubnet01

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref TestSubnet02
        
    #This is the VPC that the rotation Lambda and the RDS instance will be placed in
    TestVPC: 
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true 
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    # Subnet that the rotation Lambda and the RDS instance will be placed in 
    TestSubnet01:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.96.0/19
        AvailabilityZone:
          Fn::Select:
            - '0'
            - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId:
          Ref: TestVPC
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    TestSubnet02:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.128.0/19
        AvailabilityZone:
          Fn::Select:
            - '1'
            - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId:
          Ref: TestVPC
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    #VPC endpoint that will enable the rotation Lambda to make api calls to Secrets Manager 
    SecretsManagerVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        SubnetIds:
          - Ref: TestSubnet01
          - Ref: TestSubnet02
        SecurityGroupIds:
          - !GetAtt TestVPC.DefaultSecurityGroup
        VpcEndpointType: 'Interface'
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
        PrivateDnsEnabled: true
        VpcId:
          Ref: TestVPC

    #This is a Secret resource with a randomly generated password in its SecretString JSON.
    MyRDSInstanceRotationSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: 'This is my rds instance secret'
        GenerateSecretString:
          SecretStringTemplate: '{"username": "admin"}'
          GenerateStringKey: 'password'
          PasswordLength: 32
          ExcludeCharacters: '"@/\'

    #This is an RDS instance resource. Its master username and password use dynamic references to resolve values from 
    #SecretsManager. The dynamic reference guarantees that CloudFormation will not log or persist the resolved value 
    #We sub the Secret resource's logical id in order to construct the dynamic reference, since the Secret's name is being #generated by CloudFormation
    MyDBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 20
        DBInstanceIdentifier:
         Ref: AWS::StackName
        Engine: mysql
        DBSubnetGroupName:
          Ref: MyDBSubnetGroup
        MasterUsername: !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}'
        BackupRetentionPeriod: 0
        VPCSecurityGroups:
          - !GetAtt TestVPC.DefaultSecurityGroup
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    #Database subnet group for the RDS instance 
    MyDBSubnetGroup: 
      Type: AWS::RDS::DBSubnetGroup
      Properties: 
        DBSubnetGroupDescription: "Test Group"
        SubnetIds: 
            - Ref: TestSubnet01
            - Ref: TestSubnet02
  
    #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
    #the referenced RDS instance
    SecretRDSInstanceAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref MyRDSInstanceRotationSecret
        TargetId: !Ref MyDBInstance
        TargetType: AWS::RDS::DBInstance
    
    #This is a RotationSchedule resource. It configures rotation of password for the referenced secret using a rotation lambda
    #The first rotation happens at resource creation time, with subsequent rotations scheduled according to the rotation rules
    #We explicitly depend on the SecretTargetAttachment resource being created to ensure that the secret contains all the
    #information necessary for rotation to succeed
    MySecretRotationSchedule:
      Type: AWS::SecretsManager::RotationSchedule
      DependsOn: SecretRDSInstanceAttachment 
      Properties:
        SecretId: !Ref MyRDSInstanceRotationSecret
        HostedRotationLambda:
          RotationType: MySQLSingleUser
          RotationLambdaName: SecretsManagerRotation
          VpcSecurityGroupIds: !GetAtt TestVPC.DefaultSecurityGroup
          VpcSubnetIds:
            Fn::Join:
              - ","
              - - Ref: TestSubnet01
                - Ref: TestSubnet02
        RotationRules:
          AutomaticallyAfterDays: 30

    WebSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref TestVPC
        GroupDescription: Enable HTTP access via user defined port
        SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    DeployAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Metadata:
        AWS::CloudFormation::Init:
          configSets:
            InstallAndRun:
            - Install
            - Configure
          Install:
            packages:
              yum:
                httpd: []
                php: []
                php-mysql: []
            files:
              "/var/www/html/index.php":
                content:
                  Fn::Join:
                  - ''
                  - - "<html>\n"
                    - "  <head>\n"
                    - "    <title>AWS CloudFormation PHP Sample</title>\n"
                    - '    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">

                      '
                    - "  </head>\n"
                    - "  <body>\n"
                    - "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n"
                    - "    <p/>\n"
                    - "    <?php\n"
                    - "      // Print out the current data and time\n"
                    - '      print "The Current Date and Time is: <br/>";

                      '
                    - '      print date("g:i A l, F j Y.");

                      '
                    - "    ?>\n"
                    - "    <p/>\n"
                    - "    <?php\n"
                    - "      // Setup a handle for CURL\n"
                    - "      $curl_handle=curl_init();\n"
                    - "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n"
                    - "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n"
                    - "      // Get the hostname of the intance from the instance metadata\n"
                    - "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n"
                    - "      $hostname = curl_exec($curl_handle);\n"
                    - "      if (empty($hostname))\n"
                    - "      {\n"
                    - '        print "Sorry, for some reason, we got no hostname back
                      <br />";

                      '
                    - "      }\n"
                    - "      else\n"
                    - "      {\n"
                    - '        print "Server = " . $hostname . "<br />";

                      '
                    - "      }\n"
                    - "      // Get the instance-id of the intance from the instance
                      metadata\n"
                    - "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n"
                    - "      $instanceid = curl_exec($curl_handle);\n"
                    - "      if (empty($instanceid))\n"
                    - "      {\n"
                    - '        print "Sorry, for some reason, we got no instance id
                      back <br />";

                      '
                    - "      }\n"
                    - "      else\n"
                    - "      {\n"
                    - '        print "EC2 instance-id = " . $instanceid . "<br />";

                      '
                    - "      }\n"
                    - '      $Database   = mydb'
                    - "\";\n"
                    - '      $DBUser     = "'
                    - !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}'
                    - "\";\n"
                    - '      $DBPassword = "'
                    - !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}'
                    - "\";\n"
                    - '      print "Database = " . $Database . "<br />";

                      '
                    - '      $dbconnection = mysql_connect("'
                    - !GetAtt MyDBInstance.Endpoint.Address
                    - '", $DBUser, $DBPassword,
                      $Database)\n'
                    - '                      or die("Could not connect: " . mysql_error());

                      '
                    - '      print ("Connected to $Database successfully");

                      '
                    - "      mysql_close($dbconnection);\n"
                    - "    ?>\n"
                    - "    <h2>PHP Information</h2>\n"
                    - "    <p/>\n"
                    - "    <?php\n"
                    - "      phpinfo();\n"
                    - "    ?>\n"
                    - "  </body>\n"
                    - "</html>\n"
                mode: '000600'
                owner: apache
                group: apache
              "/etc/cfn/cfn-hup.conf":
                content:
                  Fn::Join:
                  - ''
                  - - "[main]\n"
                    - stack=
                    - Ref: AWS::StackId
                    - "\n"
                    - region=
                    - Ref: AWS::Region
                    - "\n"
                mode: '000400'
                owner: root
                group: root
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                content:
                  Fn::Join:
                  - ''
                  - - "[cfn-auto-reloader-hook]\n"
                    - 'triggers=post.update

                      '
                    - 'path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init

                      '
                    - 'action=/opt/aws/bin/cfn-init -v '
                    - "         --stack "
                    - Ref: AWS::StackName
                    - "         --resource WebServerInstance "
                    - "         --configsets InstallAndRun "
                    - "         --region "
                    - Ref: AWS::Region
                    - "\n"
                    - 'runas=root'
              "/tmp/setup.mysql":
                content:
                  Fn::Join:
                  - ''
                  - - 'CREATE DATABASE mydb'
                    - ";\n"
                mode: '000400'
                owner: root
                group: root
            services:
              sysvinit:
                httpd:
                  enabled: 'true'
                  ensureRunning: 'true'
                cfn-hup:
                  enabled: 'true'
                  ensureRunning: 'true'
                  files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
          Configure:
            commands:
              01_create_database:
                command:
                  Fn::Join:
                  - ''
                  - - "mysql -u"
                    - !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}'
                    - "--password="
                    - !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}'
                    - "' < /tmp/setup.mysql"
                test:
                  Fn::Join:
                  - ''
                  - - "$(mysql "
                    - !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}'
                    - " -u root --password='"
                    - !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}'
                    - "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"  
      Properties:
        ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
        AssociatePublicIpAddress: true
        InstanceType: t3.micro
        KeyName: my-test-key
        SecurityGroups:
          - !Ref WebSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
            - ''
            - - "#!/bin/bash -xe\n"
              - 'yum install -y aws-cfn-bootstrap

                '
              - "# Install the files and packages from the metadata\n"
              - "/opt/aws/bin/cfn-init -v "
              - "         --stack "
              - Ref: AWS::StackName
              - "         --resource DeployAppLaunchConfig "
              - "         --configsets InstallAndRun "
              - "         --region "
              - Ref: AWS::Region
              - "\n"
              - "# Signal the status from cfn-init\n"
              - "/opt/aws/bin/cfn-signal -e $? "
              - "         --stack "
              - Ref: AWS::StackName
              - "         --resource DeployAppLaunchConfig "
              - "         --region "
              - Ref: AWS::Region
              - "\n"
              
    DeployAppASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
          - !Ref TestSubnet01
          - !Ref TestSubnet02
        DesiredCapacity: 2
        LaunchConfigurationName: !Ref DeployAppLaunchConfig
        TargetGroupARNs: [ !Ref WebAppTargetGroup ]
        MaxSize: 4
        MinSize: 2
        Tags:
          - Key: Name
            Value: TestProject
            PropagateAtLaunch: True
          - Key: DevOpsOwner
            Value: Kavyesh S
            PropagateAtLaunch: True
          - Key: Region
            Value: !Ref 'AWS::Region'
            PropagateAtLaunch: True
          - Key: Environment
            Value: Development
            PropagateAtLaunch: True
      UpdatePolicy:
        AutoScalingReplacingUpdate:
          WillReplace: True

    ALBSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref TestVPC
        GroupDescription: Enable HTTP/HTTPS access
        SecurityGroupIngress:
          - IpProtocol: 'tcp'
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
          - IpProtocol: 'tcp'
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    WebAppALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Scheme: internet-facing
        SecurityGroups:
          - !Ref ALBSecurityGroup
        Subnets:
          - !Ref TestSubnet01
          - !Ref TestSubnet02
        Type: application
        Tags:
          - Key: Name
            Value: TestProject
          - Key: DevOpsOwner
            Value: Kavyesh S
          - Key: Region
            Value: !Ref 'AWS::Region'
          - Key: Environment
            Value: Development

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppALB
        Port: '80'
        Protocol: HTTP
  
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: '80'
        Protocol: 'HTTP'
        VpcId: !Ref TestVPC
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2

Outputs:
  ALBDNS:
    Description: Web App ALB DNS Name 
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - Fn::GetAtt: WebAppALB.DNSName
  RDSDNS:
    Description: RDS DNS Name
    Value: !GetAtt MyDBInstance.Endpoint.Address
  