AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::SecretsManager-2020-07-23
Description: "This is an example template to demonstrate CloudFormation resources for Secrets Manager"
Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-0885b1f6bd170450c"
Resources:
    
    MyInternetGateway:
      Type: AWS::EC2::InternetGateway

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref TestVPC
        InternetGatewayId: !Ref MyInternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref TestVPC
    
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref MyInternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref TestSubnet01

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref TestSubnet02
        
    #This is the VPC that the rotation Lambda and the RDS instance will be placed in
    TestVPC: 
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true 

    # Subnet that the rotation Lambda and the RDS instance will be placed in 
    TestSubnet01:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.96.0/19
        AvailabilityZone:
          Fn::Select:
            - '0'
            - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId:
          Ref: TestVPC

    TestSubnet02:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.128.0/19
        AvailabilityZone:
          Fn::Select:
            - '1'
            - Fn::GetAZs: {Ref: 'AWS::Region'}
        VpcId:
          Ref: TestVPC

    #VPC endpoint that will enable the rotation Lambda to make api calls to Secrets Manager 
    SecretsManagerVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        SubnetIds:
          - Ref: TestSubnet01
          - Ref: TestSubnet02
        SecurityGroupIds:
          - !GetAtt TestVPC.DefaultSecurityGroup
        VpcEndpointType: 'Interface'
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
        PrivateDnsEnabled: true
        VpcId:
          Ref: TestVPC

    #This is a Secret resource with a randomly generated password in its SecretString JSON.
    MyRDSInstanceRotationSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: 'This is my rds instance secret'
        GenerateSecretString:
          SecretStringTemplate: '{"username": "admin"}'
          GenerateStringKey: 'password'
          PasswordLength: 16
          ExcludeCharacters: '"@/\'
        Tags:
          -
            Key: AppName
            Value: MyApp

    #This is an RDS instance resource. Its master username and password use dynamic references to resolve values from 
    #SecretsManager. The dynamic reference guarantees that CloudFormation will not log or persist the resolved value 
    #We sub the Secret resource's logical id in order to construct the dynamic reference, since the Secret's name is being #generated by CloudFormation
    MyDBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: mysql
        DBSubnetGroupName:
          Ref: MyDBSubnetGroup
        MasterUsername: !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}'
        BackupRetentionPeriod: 0
        VPCSecurityGroups:
          - !GetAtt TestVPC.DefaultSecurityGroup

    #Database subnet group for the RDS instance 
    MyDBSubnetGroup: 
      Type: AWS::RDS::DBSubnetGroup
      Properties: 
        DBSubnetGroupDescription: "Test Group"
        SubnetIds: 
            - Ref: TestSubnet01
            - Ref: TestSubnet02
  
    #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
    #the referenced RDS instance
    SecretRDSInstanceAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref MyRDSInstanceRotationSecret
        TargetId: !Ref MyDBInstance
        TargetType: AWS::RDS::DBInstance
    
    #This is a RotationSchedule resource. It configures rotation of password for the referenced secret using a rotation lambda
    #The first rotation happens at resource creation time, with subsequent rotations scheduled according to the rotation rules
    #We explicitly depend on the SecretTargetAttachment resource being created to ensure that the secret contains all the
    #information necessary for rotation to succeed
    MySecretRotationSchedule:
      Type: AWS::SecretsManager::RotationSchedule
      DependsOn: SecretRDSInstanceAttachment 
      Properties:
        SecretId: !Ref MyRDSInstanceRotationSecret
        HostedRotationLambda:
          RotationType: MySQLSingleUser
          RotationLambdaName: SecretsManagerRotation
          VpcSecurityGroupIds: !GetAtt TestVPC.DefaultSecurityGroup
          VpcSubnetIds:
            Fn::Join:
              - ","
              - - Ref: TestSubnet01
                - Ref: TestSubnet02
        RotationRules:
          AutomaticallyAfterDays: 30

    ControlPortAddress:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

    AssociateControlPort:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: !GetAtt ControlPortAddress.AllocationId
        NetworkInterfaceId: !Ref controlXface

    WebPortAddress:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    
    AssociateWebPort:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: !GetAtt WebPortAddress.AllocationId
        NetworkInterfaceId: !Ref webXface
    
    SSHSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref TestVPC
        GroupDescription: Enable SSH access via port 22
        SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

    WebSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref TestVPC
        GroupDescription: Enable HTTP access via user defined port
        SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

    controlXface:
      Type: AWS::EC2::NetworkInterface
      Properties:
        SubnetId: !Ref TestSubnet01
        Description: Interface for controlling traffic such as SSH
        GroupSet: 
        - !Ref SSHSecurityGroup
        SourceDestCheck: true
        Tags:
          -
            Key: Network
            Value: Control

    webXface:
      Type: AWS::EC2::NetworkInterface
      Properties:
        SubnetId: !Ref TestSubnet01
        Description: Interface for controlling traffic such as SSH
        GroupSet: 
        - !Ref WebSecurityGroup
        SourceDestCheck: true
        Tags:
          -
            Key: Network
            Value: Web

    Ec2Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
        KeyName: my-test-key
        NetworkInterfaces:
          -
            NetworkInterfaceId: !Ref controlXface
            DeviceIndex: 0
          -
            NetworkInterfaceId: !Ref webXface
            DeviceIndex: 1
        Tags:
          -
            Key: Role
            Value: Test Instance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo service nginx start